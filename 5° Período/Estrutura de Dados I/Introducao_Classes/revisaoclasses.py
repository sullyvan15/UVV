# -*- coding: utf-8 -*-
"""RevisaoClasses.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lDygHNUeYn_S-ZxGAF0cZ0G_mvdWkUZ7
"""

# https://docs.python.org/3.6/tutorial/controlflow.html

import math
import sys
import random
from datetime import datetime

# https://panda.ime.usp.br/pensepy/static/pensepy/13-Classes/classesintro.html
# https://www.devmedia.com.br/como-criar-minha-primeira-classe-em-python/38912
#https://www.devmedia.com.br/como-criar-minha-primeira-classe-em-python/38912

#modificador de acesso: private, public, protected
# https://cursos.alura.com.br/forum/topico-atributos-privados-de-verdade-97147


class Point:
    """ Point class for representing and manipulating x,y coordinates. 
        2D (x,y) 
        3D (x,y,z)
    """

    def __init__(self): # self equivale a this: referencia para o objeto que está sendo executado.
        """ Create a new point at the origin 
            Criar um novo ponto na origem (0,0,0)
            Construtor da Classe
            atributos: x, y, __z
        """
        self.x = 0 # public
        self.y = 0 # public
        self.z = 0 # public
        #self.__z = 0 # forcar o atributo z ser privado

    # def __init__(self, initX, initY, initZ):

    #     self.x = initX
    #     self.y = initY
    #     self.z = initX
    #     self.__z= initZ

    def setX(self, x):
      self.x = x

    def setY(self, y):
      self.y = y

    def setZ(self, z):
      self.z = z

    def getX(self):
      return self.x

    def getY(self):
      return self.y

    def getZ(self):
      return self.z

    def somaPoint(self, novo_pto):
      p_soma = Point() # criar um ponto : endereco ou referencia
      p_soma.x = self.x + novo_pto.x
      p_soma.setY(self.y + novo_pto.getY())
      p_soma.z = self.z + novo_pto.z
      # retorna um ponto
      return p_soma # retorna endereco ou referencia
    

    def __str__(self): # to_string do java: retorna uma string
        return "x=" + str(self.x) + ", y=" + str(self.y) + ", z=" + str(self.z)


# teste unitário
# tudo abaixo deste if não faz parte da classe Point

if __name__ == "__main__":

  p = Point()         # Instantiate an object of type Point
  #(0,0,0)
  q = Point()         # and make a second point

# o que esta armazenada dentro do objeto p ?
# endereço de memoria (referencia) onde foi foi alocado

  p.setX(6)
  p.x = 6
  p.setY(10)
  p.setZ(20)
  #(6,10,20)

  # (6,10,20) + (0,0,0) = (6+0, 10+0, 20+0) = (6, 10, 20)

  soma_p_e_q = Point() # crei um novo ponto
  soma_p_e_q = p.somaPoint(soma_p_e_q)

  print(' soma_p_e_q.x = {}'.format(soma_p_e_q.getX()))
  print(' soma_p_e_q.y = {}'.format(soma_p_e_q.getY()))
  print(' soma_p_e_q.z = {}'.format(soma_p_e_q.getZ()))

  #atribuindo valores para o ponto q
  q.x = 20 # q.setX(20) # nome_objeto.atributo ou nome_objeto.metodo
  q.y = 30
  q.z = 40

  novo_ponto = p.somaPoint(q) # soma ponto p com ponto q: (6,10,20) + (20,30,40) = (26, 40, 60)

  print(' novo_ponto.x = {}'.format(novo_ponto.x))
  print(' novo_ponto.y = {}'.format(novo_ponto.y))
  print(' novo_ponto.z = {}'.format(novo_ponto.z))

  #print(p) # x=6, y=10  # <__main__.Point object at 0x7f68cce51400>
  #print(q) # <__main__.Point object at 0x7f68cce514e0>
  
  
  #print(' p.z = {}'. format(p._Point__z)) # burlando o acesso atributo privado

  #print(p is q)

# ===================================================